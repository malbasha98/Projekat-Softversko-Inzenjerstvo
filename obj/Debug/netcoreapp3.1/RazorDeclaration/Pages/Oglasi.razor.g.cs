// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Kucni_poslovi.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projekti-master\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projekti-master\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projekti-master\Pages\Oglasi.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projekti-master\Pages\Oglasi.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projekti-master\Pages\Oglasi.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projekti-master\Pages\Oglasi.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projekti-master\Pages\Oglasi.razor"
using BlazorFabric;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projekti-master\Pages\Oglasi.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Oglas/{oglasid}")]
    public partial class Oglasi : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 479 "D:\Projekti-master\Pages\Oglasi.razor"
 
    [Parameter]
    public string oglasid { get; set; }

    private Oglas oglas { get; set; }
    public bool Ucitan { get; set; } = false;
    KorisnikUsluge Korisnik = new KorisnikUsluge();
    PruzalacUsluge Pruzalac = new PruzalacUsluge();

    private SfToast ToastObj;
    private string ToastNaslov { get; set; }
    private string ToastSadrzaj { get; set; }

    private bool ImaOglas { get; set; }
    private bool IstiTipUsluge { get; set; } = false;
    private bool PoslatZahtev { get; set; } = false;
    private bool Visibility { get; set; }
    private bool VisibilityObrisi { get; set; }
    private bool VisibilitySlika { get; set; }
    private string slikaKojaSePrikazuje;
    private bool VisibilityProduzi { get; set; }
    private int noviDatumDana { get; set; }
    private Dictionary<string, bool> PostojiZahtev = new Dictionary<string, bool>();
    private Dictionary<string, bool> PrimljenZahtev = new Dictionary<string, bool>();

    private double ocena { get; set; }
    private double ocenjenaOcena { get; set; }
    private double vasaOcenjenaOcena { get; set; } 

    private string naslov;
    private string stanje;
    private string stanjePoruka;
    private string usluga;
    private string path = Directory.GetCurrentDirectory();
    private string[] slike;

    protected async override Task OnInitializedAsync()
    {

        Ucitan = false;;
        Guid oglasGuid;
        if (Guid.TryParse(oglasid, out oglasGuid))
            oglas = await dbContext.nadjiOglas(oglasGuid);

        if (oglas == null)
            return;

        if (oglas.ProveriDaLiVazi())
        {
            dbContext.Update(oglas);
            await dbContext.SaveChangesAsync();
        }
        naslov = oglas.NaslovOglasa.ToUpper();
        string[] split = Regex.Split(oglas.TipUsluge.ToString(), @"(?<!^)(?=[A-Z])");
        string ceo = "";
        foreach (var rec in split)
        {
            ceo += rec + " ";
        }
        usluga = ceo;
        switch (oglas.Stanje)
        {
            case Stanje.Aktivan:
                stanje = "alert alert-success";
                stanjePoruka = "Oglas je AKTIVAN!";
                break;
            case Stanje.UIzvršavanju:
                stanje = "alert alert-info";
                stanjePoruka = "Oglas je U IZVRŠAVANJU!";
                break;
            case Stanje.Izvršen:
                stanje = "alert alert-dark";
                stanjePoruka = "Oglas je IZVRŠEN!";
                break;
            case Stanje.Neaktivan:
                stanje = "alert alert-danger";
                stanjePoruka = "Oglas je NEAKTIVAN!";
                break;
            default:
                break;
        }

        if (oglas.PutanjeDoSlika != null)
            slike = oglas.PutanjeDoSlika.Split('?');
        else
            slike = new string[0];

        var state = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("PruzalacUsluge"))
        {
            Pruzalac = await dbContext.VratiPruzaoca(state.User.Identity.Name);
            if (Pruzalac.TipUsluga.HasFlag(oglas.TipUsluge))
                IstiTipUsluge = true;
            PoslatZahtev = await dbContext.PostojiZahtevKaKorisniku(Pruzalac.Id, oglas.Id);
            ocenjenaOcena = oglas.OcenjenKorisnik.GetValueOrDefault();
            vasaOcenjenaOcena = oglas.OcenjenPruzalac.GetValueOrDefault();

            bool DaLiPostojiZahtev = await dbContext.PostojiZahtevKaPruzaocu(oglas.KorisnikUsluge.UserName, Pruzalac.Id, oglas.Id);
            PostojiZahtev.Add(Pruzalac.Id, DaLiPostojiZahtev);
        }
        else if (state.User.IsInRole("KorisnikUsluge"))
        {
            Korisnik = await dbContext.VratiKorisnika(state.User.Identity.Name);
            ImaOglas = await dbContext.DaLiImaKorisnikOglas(Korisnik.Id, oglasid);
            ocenjenaOcena = oglas.OcenjenPruzalac.GetValueOrDefault();
            vasaOcenjenaOcena = oglas.OcenjenKorisnik.GetValueOrDefault();
            foreach (var evidencija in oglas.Evidencije)
            {
                string IdPruzaoca = evidencija.PruzalacUsluge.Id;
                bool DaLiPostojiZahtev = await dbContext.PostojiZahtevKaPruzaocu(Korisnik.UserName, IdPruzaoca, oglas.Id);
                PostojiZahtev.Add(IdPruzaoca, DaLiPostojiZahtev);
                bool DaLiJePrimljenZahtev = await dbContext.PostojiZahtevKaKorisniku(IdPruzaoca, oglas.Id);
                PrimljenZahtev.Add(IdPruzaoca, DaLiJePrimljenZahtev);
            }
        }

    }

    private async Task PosaljiZahtevPruzaocu(string id)
    {
        Zahtev noviZahtev = new Zahtev()
        {
            Pregledan = false,
            Oglas = oglas
        };
        noviZahtev.Ucesnik = await dbContext.PruzaociUsluga.FindAsync(id);

        noviZahtev.Naslov = Korisnik.UserName;
        dbContext.Add(noviZahtev);
        await dbContext.SaveChangesAsync();

        PostojiZahtev[id] = true;

        ToastObj.Content = "Uspesno poslat zahtev";
        ToastObj.Title = "Vas zahtev je uspesno poslat korisniku " + noviZahtev.Ucesnik.UserName;
        await ToastObj.Show();


    }

    private async Task PosaljiZahtevKorisniku()
    {
        Zahtev noviZahtev = new Zahtev()
        {
            Pregledan = false,
            Oglas = oglas,

        };

        noviZahtev.Naslov = Pruzalac.UserName;

        noviZahtev.Ucesnik = await dbContext.PruzaociUsluga.FindAsync(Pruzalac.Id);
        dbContext.Add(noviZahtev);
        await dbContext.SaveChangesAsync();

        PoslatZahtev = true;

        PrimljenZahtev[Pruzalac.Id] = true;

        ToastObj.Content = "Uspesno poslat zahtev";
        ToastObj.Title = "Vas zahtev je uspesno poslat korisniku " + oglas.KorisnikUsluge.UserName;
        await ToastObj.Show();

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            Ucitan = true;
            StateHasChanged();
        }

    }

    private void IdiNaProfil(string id)
    {
        navMenager.NavigateTo("Profil/" + id);
    }

    private void ObrisiOglas()
    {
        this.VisibilityObrisi = true;
    }

    private void AzurirajOglas()
    {
        navMenager.NavigateTo("NoviOglas/" + oglas.Id);
    }

    private void ZavrsiOglas()
    {
        this.Visibility = true;
    }

    private async Task DlgButtonClickObrisi()
    {
        this.VisibilityObrisi = false;

        await dbContext.ObrisiOglas(oglas.Id);
        navMenager.NavigateTo("MojiOglasi");
    }

    private async Task DlgButtonClick()
    {
        this.Visibility = false;

        oglas.Stanje = Stanje.Izvršen;
        stanje = "alert alert-dark";
        stanjePoruka = "Oglas je IZVRŠEN!";
        dbContext.Oglasi.Update(oglas);
        await dbContext.SaveChangesAsync();

        ToastObj.Title = "Uspesno promena oglasa";
        ToastObj.Content = "Oglas je zvanično izvršen";
        await ToastObj.Show();
    }

    private void PrikaziSliku(string putanja)
    {
        slikaKojaSePrikazuje = putanja;
        this.VisibilitySlika = true;
    }

    private void Oceni(double nova)
    {
        ocena = nova;
    }

    private async Task OceniKorisnika()
    {
        oglas.OcenjenKorisnik = (int)ocena;
        oglas.KorisnikUsluge.OceniOglas((int)ocena);

        if (oglas.OcenjenPruzalac != null && oglas.OcenjenKorisnik != null)
        {
            stanje = "alert alert-danger";
            stanjePoruka = "Oglas je NEAKTIVAN!";
            oglas.Stanje = Stanje.Neaktivan;
        }

        dbContext.Update(oglas);
        dbContext.Update(oglas.KorisnikUsluge);
        await dbContext.SaveChangesAsync();
        ocenjenaOcena = oglas.OcenjenKorisnik.GetValueOrDefault();
        this.StateHasChanged();

        ToastObj.Title = "Uspesno ocena";
        ToastObj.Content = "Uspešno ste ocenili korisnika " + oglas.KorisnikUsluge.UserName;
        await ToastObj.Show();
    }

    private async Task OceniPruzaoca()
    {
        oglas.OcenjenPruzalac = (int)ocena;
        oglas.OdabranPruzalac.OceniOglas((int)ocena);


        if (oglas.OcenjenPruzalac != null && oglas.OcenjenKorisnik != null)
        {
            stanje = "alert alert-danger";
            stanjePoruka = "Oglas je NEAKTIVAN!";
            oglas.Stanje = Stanje.Neaktivan;
        }

        dbContext.Update(oglas);
        dbContext.Update(oglas.OdabranPruzalac);
        await dbContext.SaveChangesAsync();
        ocenjenaOcena = oglas.OcenjenPruzalac.GetValueOrDefault();
        this.StateHasChanged();

        ToastObj.Title = "Uspesno ocena";
        ToastObj.Content = "Uspešno ste ocenili korisnika " + oglas.OdabranPruzalac.UserName;
        await ToastObj.Show();
    }

    private void ProduziOglas()
    {
        this.VisibilityProduzi = true;
    }

    private async Task DlgButtonClickProduzi()
    {
        oglas.DatumVazenja = DateTime.Now.AddDays(noviDatumDana);
        oglas.Stanje = Stanje.Aktivan;
        if (!oglas.ProveriDaLiVazi())
        {
            stanje = "alert alert-success";
            stanjePoruka = "Oglas je AKTIVAN!";
            dbContext.Oglasi.Update(oglas);
            await dbContext.SaveChangesAsync();
        }
        this.VisibilityProduzi = false;
    }

    private async Task PotvrdiZahtev(string idPruzaoca)
    {
        Zahtev zahtev = await dbContext.vratiZahtev(idPruzaoca, oglas.Id);
        var izmenjenaEvidencija = await dbContext.nadjiEvidenciju(oglas.Id, idPruzaoca);
        oglas.ProveriDaLiVazi();
        if (oglas.Stanje == Stanje.Aktivan)
        {
            izmenjenaEvidencija.Prijavljen = true;
            zahtev.Pregledan = true;
            oglas.Stanje = Stanje.UIzvršavanju;
            oglas.OdabranPruzalac = zahtev.Ucesnik;
            dbContext.Update(oglas);
            dbContext.Update(izmenjenaEvidencija);
            dbContext.Update(zahtev);
            await dbContext.SaveChangesAsync();

            stanje = "alert alert-info";
            stanjePoruka = "Oglas je U IZVRŠAVANJU!";
            //this.StateHasChanged();

            ToastObj.Title = "Uspesno potvrđen zahtev";
            ToastObj.Content = "Uspešno ste potvrdili zahtev";
            await ToastObj.Show();
        }
        else
        {
            //ovde dodati notifikaciju
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navMenager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MySqlCRUD dbContext { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
