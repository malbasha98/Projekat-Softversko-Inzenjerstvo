// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Kucni_poslovi.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projekti-master\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projekti-master\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projekti-master\Pages\Profil.razor"
using Syncfusion.Blazor.Spinner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projekti-master\Pages\Profil.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projekti-master\Pages\Profil.razor"
using BlazorFabric;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Profil/{idKorisnika}")]
    public partial class Profil : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 226 "D:\Projekti-master\Pages\Profil.razor"
 

    [Parameter]
    public string idKorisnika { get; set; }
    private string _profil { get; set; }

    private SfToast ToastObj;
    private string ToastNaslov { get; set; }
    private string ToastSadrzaj { get; set; }

    KorisnikUsluge Korisnik = new KorisnikUsluge();
    PruzalacUsluge Pruzalac = new PruzalacUsluge();
    private string Usluga { get; set; }
    KorisnikUsluge kojiZeliDaPosaljeZahtev = new KorisnikUsluge();
    private List<Oglas> preporuceniOglasi = new List<Oglas>();
    private Dictionary<Guid, bool> oglasiZahtevi = new Dictionary<Guid, bool>();
    private Dictionary<Guid, bool> oglasiZahteviVecPrimljeni = new Dictionary<Guid, bool>();//dodato.................!!!

    private bool rolaKorisnik { get; set; }
    public bool Ucitan { get; set; } = false;
    private string idKorisnikaKojiPristupa { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Ucitan = false;
        Guid korisnikGuid;
        if (!Guid.TryParse(idKorisnika, out korisnikGuid))
            return;

        var state = await authenticationStateProvider.GetAuthenticationStateAsync();

        if (state.User.IsInRole("KorisnikUsluge"))
        {
            kojiZeliDaPosaljeZahtev = await dbContext.VratiKorisnika(state.User.Identity.Name);
            idKorisnikaKojiPristupa = kojiZeliDaPosaljeZahtev.Id;
        }
        else if (state.User.IsInRole("PruzalacUsluge"))
        {
            var user = await dbContext.VratiPruzaoca(state.User.Identity.Name);
            idKorisnikaKojiPristupa = user.Id;
        }

        var userRole = dbContext.UserRoles.Where(x => x.UserId == idKorisnika).FirstOrDefault();
        var rola = await dbContext.Roles.FindAsync(userRole.RoleId);
        if (rola.Name == "KorisnikUsluge")
        {
            rolaKorisnik = true;
            Korisnik = await dbContext.VratiKorisnikaSaId(idKorisnika);
        }
        else if (rola.Name == "PruzalacUsluge")
        {
            rolaKorisnik = false;
            Pruzalac = await dbContext.VratiPruzaocaSaId(idKorisnika);
            Usluga = "";
            foreach (TipUsluge tip in (TipUsluge[])Enum.GetValues(typeof(TipUsluge)))
            {
                if ((Pruzalac.TipUsluga & tip) == tip)
                    Usluga += tip.ToString() + ", ";
            }
            if (Usluga != "")
                Usluga = Usluga.Remove(Usluga.Length - 2);

            if (state.User.IsInRole("KorisnikUsluge"))
            {
                foreach (var oglas in kojiZeliDaPosaljeZahtev.MojiOglasi)
                {
                    if (oglas.ProveriDaLiVazi())
                    {
                        dbContext.Update(oglas);
                        await dbContext.SaveChangesAsync();
                    }
                    if (oglas.Stanje == Stanje.Aktivan)
                    {
                        if (oglas.Evidencije.Find(x => x.PruzalacUsluge.Id == Pruzalac.Id) != null)
                        {
                            var postoji = await dbContext.PostojiZahtevKaPruzaocu(kojiZeliDaPosaljeZahtev.UserName, Pruzalac.Id, oglas.Id);
                            preporuceniOglasi.Add(oglas);
                            oglasiZahtevi.Add(oglas.Id, postoji);
                            var postojiPrimljenZahtev = await dbContext.PostojiZahtevKaKorisniku(Pruzalac.Id, oglas.Id);//dodato.........!!!
                            oglasiZahteviVecPrimljeni.Add(oglas.Id, postojiPrimljenZahtev);//dodato...........................!!!
                        }
                    }
                }

            }
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            Ucitan = true;
            StateHasChanged();
        }

    }

    protected async override Task OnParametersSetAsync()
    {
        if (_profil != null)
        {
            if (_profil != idKorisnika)
            {
                _profil = idKorisnika;
                await this.OnInitializedAsync();
            }
        }
        else
            _profil = idKorisnika;
    }

    private void AzurirajProfil()
    {
        navMenager.NavigateTo("MojProfil");
    }

    private async Task PosaljiZahtev(Guid idOglasa)
    {
        Zahtev noviZahtev = new Zahtev()
        {
            Pregledan = false,
            Ucesnik = Pruzalac
        };
        noviZahtev.Oglas = await dbContext.nadjiOglas(idOglasa);

        noviZahtev.Naslov = kojiZeliDaPosaljeZahtev.UserName;
        dbContext.Add(noviZahtev);
        await dbContext.SaveChangesAsync();

        oglasiZahtevi[idOglasa] = true;

        ToastObj.Content = "Uspesno poslat zahtev";
        ToastObj.Title = "Vas zahtev je uspesno poslat korisniku " + noviZahtev.Ucesnik.UserName;
        await ToastObj.Show();
    }

    private async Task PotvrdiZahtev(Guid idOglasa)
    {
        var zahtev = await dbContext.vratiZahtev(Pruzalac.Id, idOglasa);
        var izmenjenaEvidencija = await dbContext.nadjiEvidenciju(idOglasa, Pruzalac.Id);
        zahtev.Oglas.ProveriDaLiVazi();
        if (zahtev.Oglas.Stanje == Stanje.Aktivan)
        {
            izmenjenaEvidencija.Prijavljen = true;
            zahtev.Pregledan = true;
            zahtev.Oglas.Stanje = Stanje.UIzvršavanju;
            zahtev.Oglas.OdabranPruzalac = zahtev.Ucesnik;
            dbContext.Update(zahtev.Oglas);
            dbContext.Update(izmenjenaEvidencija);
            dbContext.Update(zahtev);
            await dbContext.SaveChangesAsync();
            oglasiZahteviVecPrimljeni[idOglasa] = true;

            ToastObj.Title = "Uspesno potvrđen zahtev";
            ToastObj.Content = "Uspešno ste potvrdili zahtev";
            await ToastObj.Show();
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navMenager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MySqlCRUD dbContext { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
