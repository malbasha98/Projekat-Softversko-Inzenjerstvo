// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Kucni_poslovi.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Projekti-master\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projekti-master\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Projekti-master\_Imports.razor"
using Kucni_poslovi.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Projekti-master\_Imports.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\Projekti-master\_Imports.razor"
using Syncfusion.Blazor.SplitButtons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Projekti-master\Pages\MojiZahtevi.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Projekti-master\Pages\MojiZahtevi.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/MojiZahtevi")]
    public partial class MojiZahtevi : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 312 "D:\Projekti-master\Pages\MojiZahtevi.razor"
 
    KorisnikUsluge Korisnik = new KorisnikUsluge();
    PruzalacUsluge Pruzalac = new PruzalacUsluge();
    List<Zahtev> Zahtevi = new List<Zahtev>();
    public bool Ucitan { get; set; } = false;
    private bool VisibilityUspesan { get; set; } = false;
    private bool VisibilityNeuspesan { get; set; } = false;
    private bool Redirect { get; set;} = false;

    private class Polje
    {
        public string Id { get; set; }
        public string Tekst { get; set; }

        public Polje() { }
    }
    public class PoljeTip
    {
        public TipUsluge TipUsluge { get; set; }
        public string Tekst { get; set; }

        public PoljeTip() { }

        public PoljeTip(TipUsluge usluga)
        {
            TipUsluge = usluga;
            string[] split = Regex.Split(usluga.ToString(), @"(?<!^)(?=[A-Z])");
            string ceo = "";
            foreach (var rec in split)
            {
                ceo += rec + " ";
            }
            Tekst = ceo;
        }
    }


    private bool prikaziPrimljene = true;
    private bool prikaziPoslate = true;

    private List<Polje> listaP = new List<Polje>()
{
        new Polje() { Id = "opcija1", Tekst = "sve zahteve"},
        new Polje() { Id = "opcija2", Tekst = "poslate zahteve"},
        new Polje() { Id = "opcija3", Tekst = "primljene zahteve"}
    };

    private bool prikaziPregledane = true;
    private bool prikaziNepregledane = true;

    private List<Polje> listaS = new List<Polje>()
{
        new Polje() { Id = "opcija1", Tekst = "sve zahteve"},
        new Polje() { Id = "opcija2", Tekst = "pregledane zahteve"},
        new Polje() { Id = "opcija3", Tekst = "nepregledane zahteve"}
    };

    private Func<Zahtev, string> kriterijumF = i => i.Oglas.KorisnikUsluge.UserName;
    private string kriterijumFTekst;
    private Func<Zahtev, string> kriterijumFKorisnickoIme = i => i.Oglas.KorisnikUsluge.UserName;

    private List<Polje> listaF = new List<Polje>()
{
        new Polje() { Id = "opcija1", Tekst = "korisničkom imenu"},
        new Polje() { Id = "opcija2", Tekst = "naslovu oglasa"},
        new Polje() { Id = "opcija3", Tekst = "datumu važenja"},
        new Polje() { Id = "opcija4", Tekst = "prosečnoj oceni"}
    };

    private TipUsluge kriterijumT;
    private List<PoljeTip> listaT = new List<PoljeTip>();
    private TipUsluge[] selektovaneUsluge = null;

    private void OnChangeListPrikaz(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<Polje>(args.ItemData != null ? args.ItemData.ToString() : "");

        switch (itemData.Id)
        {
            case "opcija1":
                prikaziPoslate = true;
                prikaziPrimljene = true;
                break;
            case "opcija2":
                prikaziPoslate = true;
                prikaziPrimljene = false;
                break;
            case "opcija3":
                prikaziPoslate = false;
                prikaziPrimljene = true;
                break;
            default:
                break;
        }
    }

    private void OnChangeListSeen(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<Polje>(args.ItemData != null ? args.ItemData.ToString() : "");

        switch (itemData.Id)
        {
            case "opcija1":
                prikaziPregledane = true;
                prikaziNepregledane = true;
                break;
            case "opcija2":
                prikaziPregledane = true;
                prikaziNepregledane = false;
                break;
            case "opcija3":
                prikaziPregledane = false;
                prikaziNepregledane = true;
                break;
            default:
                break;
        }
    }

    private void OnChangeListFilter(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> args)
    {
        var itemData = JsonConvert.DeserializeObject<Polje>(args.ItemData != null ? args.ItemData.ToString() : "");
        kriterijumFTekst = itemData.Id;

        switch (kriterijumFTekst)
        {
            case "opcija1":
                kriterijumF = kriterijumFKorisnickoIme;
                break;
            case "opcija2":
                kriterijumF = i => i.Oglas.NaslovOglasa;
                break;
            case "opcija3":
                kriterijumF = i => i.Oglas.DatumVazenja.ToString("yyyy.MM.dd");
                break;
            case "opcija4":
                if (Korisnik.UserName == null)
                    kriterijumF = i => (5 - i.Oglas.KorisnikUsluge.ProsecnaOcena).ToString();
                else
                    kriterijumF = i => (5 - i.Ucesnik.ProsecnaOcena).ToString();
                break;
            default:
                break;
        }
    }

    private void OnChangeListTip(MultiSelectChangeEventArgs<TipUsluge[]> args)
    {
        var itemData = args.Value;
        if (itemData == null)
        {
            itemData = (TipUsluge[])Enum.GetValues(typeof(TipUsluge));
        }
        kriterijumT = 0;
        foreach (var tip in itemData)
        {
            kriterijumT = kriterijumT | tip;
        }
        this.StateHasChanged();
    }


    protected async override Task OnInitializedAsync()
    {
        Ucitan = false;
        var state = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.IsInRole("PruzalacUsluge"))
        {
            Pruzalac = await dbContext.VratiPruzaoca(state.User.Identity.Name);
            foreach (var tipUsluge in (TipUsluge[])Enum.GetValues(typeof(TipUsluge)))
            {
                kriterijumT = kriterijumT | tipUsluge;
                if ((Pruzalac.TipUsluga & tipUsluge) != tipUsluge)
                    continue;
                PoljeTip novoPolje = new PoljeTip(tipUsluge);
                listaT.Add(novoPolje);
            }
            foreach (var zahtev in Pruzalac.MojiZahtevi)//dodato
            {
                if (zahtev.Oglas.ProveriDaLiVazi())
                {
                    dbContext.Update(zahtev.Oglas);
                    await dbContext.SaveChangesAsync();
                }
                if (zahtev.Oglas.Stanje != Stanje.Aktivan)
                {
                    if (!zahtev.Pregledan)
                    {
                        zahtev.Pregledan = true;
                        dbContext.Update(zahtev);
                        await dbContext.SaveChangesAsync();
                    }
                }
                Zahtevi.Add(zahtev);
            }
        }
        else if (state.User.IsInRole("KorisnikUsluge"))
        {
            kriterijumFKorisnickoIme = i => i.Ucesnik.UserName;
            foreach (var tipUsluge in (TipUsluge[])Enum.GetValues(typeof(TipUsluge)))
            {
                kriterijumT = kriterijumT | tipUsluge;
                PoljeTip novoPolje = new PoljeTip(tipUsluge);
                listaT.Add(novoPolje);
            }
            Korisnik = await dbContext.VratiKorisnika(state.User.Identity.Name);

            foreach (var oglas in Korisnik.MojiOglasi)
            {
                if (oglas.ProveriDaLiVazi())
                {
                    dbContext.Update(oglas);
                    await dbContext.SaveChangesAsync();
                }
                foreach (var zahtev in oglas.Zahtevi)
                {
                    if (oglas.Stanje != Stanje.Aktivan)
                    {
                        if (!zahtev.Pregledan)
                        {
                            zahtev.Pregledan = true;
                            dbContext.Update(zahtev);
                            await dbContext.SaveChangesAsync();
                        }
                    }
                    Zahtevi.Add(zahtev);
                }
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !Redirect)
        {
            Ucitan = true;
            StateHasChanged();
        }

    }

    private async Task OtvoriKorisnika(string userNameKorisnika, Zahtev zahtev, bool jeKorisnik)
    {
        if (jeKorisnik)
        {

            if (!zahtev.Pregledan && zahtev.Naslov != Korisnik.UserName)
            {
                Redirect = true;
                Ucitan = false;
                zahtev.Pregledan = true;
                dbContext.Update(zahtev);
                await dbContext.SaveChangesAsync();
                navMenager.NavigateTo("Profil/" + zahtev.Ucesnik.Id, true);
            }
            else
                navMenager.NavigateTo("Profil/" + zahtev.Ucesnik.Id);
        }
        else
        {
            if (!zahtev.Pregledan && zahtev.Naslov != Pruzalac.UserName)
            {
                Redirect = true;
                Ucitan = false;
                zahtev.Pregledan = true;
                dbContext.Update(zahtev);
                await dbContext.SaveChangesAsync();
                navMenager.NavigateTo("Profil/" + zahtev.Oglas.KorisnikUsluge.Id, true);
            }
            else
                navMenager.NavigateTo("Profil/" + zahtev.Oglas.KorisnikUsluge.Id);
        }
    }

    private async Task OtvoriOglas(Guid idOglasa, Zahtev zahtev, bool jeKorisnik)
    {
        if (jeKorisnik)
        {
            if (!zahtev.Pregledan && zahtev.Naslov != Korisnik.UserName)
            {
                Redirect = true;
                Ucitan = false;
                zahtev.Pregledan = true;
                dbContext.Update(zahtev);
                await dbContext.SaveChangesAsync();
                navMenager.NavigateTo("Oglas/" + idOglasa.ToString(), true);
            }
            else
                navMenager.NavigateTo("Oglas/" + idOglasa.ToString());
        }
        else
        {
            if (!zahtev.Pregledan && zahtev.Naslov != Pruzalac.UserName)
            {
                Redirect = true;
                Ucitan = false;
                zahtev.Pregledan = true;
                dbContext.Update(zahtev);
                await dbContext.SaveChangesAsync();
                navMenager.NavigateTo("Oglas/" + idOglasa.ToString(), true);
            }
            else
                navMenager.NavigateTo("Oglas/" + idOglasa.ToString());
        }
    }

    private async Task PotvrdiZahtev(Guid idZahteva)
    {
        var zahtev = await dbContext.nadjiZahtev(idZahteva);
        var izmenjenaEvidencija = await dbContext.nadjiEvidenciju(zahtev.Oglas.Id, zahtev.Ucesnik.Id);
        zahtev.Oglas.ProveriDaLiVazi();
        if (zahtev.Oglas.Stanje == Stanje.Aktivan)
        {
            izmenjenaEvidencija.Prijavljen = true;
            zahtev.Pregledan = true;
            zahtev.Oglas.Stanje = Stanje.UIzvršavanju;
            zahtev.Oglas.OdabranPruzalac = zahtev.Ucesnik;
            dbContext.Update(zahtev.Oglas);
            dbContext.Update(izmenjenaEvidencija);
            dbContext.Update(zahtev);
            await dbContext.SaveChangesAsync();
            this.VisibilityUspesan = true;

        }
        else
        {
            this.VisibilityNeuspesan = true;
        }
    }

    private void DlgButtonClickUspesno()
    {
        this.VisibilityUspesan = false;
        navMenager.NavigateTo("/MojiZahtevi", true);
    }

    private void DlgButtonClickNeuspesno()
    {
        this.VisibilityNeuspesan = false;
        navMenager.NavigateTo("/MojiZahtevi", true);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navMenager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MySqlCRUD dbContext { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<IdentityUser> userManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider authenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
